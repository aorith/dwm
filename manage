#!/usr/bin/env bash
# Manage your own build of dwm

CONFIG_BRANCH="config"
UPSTREAM_BRANCH="my_upstream"
UPSTREAM_PATH="../dwm-orig"
UPSTREAM_URL="https://git.suckless.org/dwm"

_info() {
    echo "$(tput setaf 4)INFO: $* $(tput sgr0)"
}
_warn() {
    echo "$(tput setaf 3)
    WARNING: $* $(tput sgr0)"
}
_err() {
    echo "$(tput setaf 1)
    ERROR: $* $(tput sgr0)"
    exit 1
}

_branches() {
    git for-each-ref --format='%(refname)' refs/heads | cut -d'/' -f3
}

_help() {
    echo "
Manage your own build of dwm

USAGE:

$(tput setaf 4)${0#*/} push-all$(tput sgr0)
    runs \"git push --all origin\"
    just here to remember to keep all branches synced

$(tput setaf 4)${0#*/} new-patch$(tput sgr0)
    this just prints a help message on how to add a new patch

$(tput setaf 4)${0#*/} build$(tput sgr0)
    runs make && make clean install, afterwards it cleans upstream branch
    and hard resets it with a manage fullclean

$(tput setaf 4)${0#*/} merge-branches$(tput sgr0)
    run this to merge all the branches to the upstream branch so you can then build
    do not commit those merges in upstream brach!!!!

$(tput setaf 4)${0#*/} diff$(tput sgr0)
    runs a diff against all branches on upstream branch

$(tput setaf 4)${0#*/} pull-origin$(tput sgr0)
    git pull on the origin repo (default ../dwm-orig)
    then copies over the upstream files to the upstream branch
    Rebasing branches and testing of patches is needed afterwards.
    Then if everything is fine commit the new upstream branch.

$(tput setaf 4)${0#*/} rebase-branches$(tput sgr0)
    rebases all the branches with the upstream branch
    ONLY USE THIS WHEN YOU'VE USED pull-origin AND THE UPSTREAM CHANGED
    THIS USUALLY REQUIRES A LOT OF WORK SOLVING CONFLICTS

$(tput setaf 4)${0#*/} clean$(tput sgr0)
    cleans the upstream branch

$(tput setaf 4)${0#*/} fullclean$(tput sgr0)
    cleans the upstream branch and hard resets it

"
    exit 0
}

_push_all() {
    git checkout master &&
    _clean &&
    git push --all origin
}

_pull_origin() {
    # clone the repo if it doesn't exist
    if [ ! -d "$UPSTREAM_PATH" ]; then
        git clone "$UPSTREAM_URL" "${UPSTREAM_PATH}" ||
            _err "could not clone upstream -> \"$UPSTREAM_URL\" to \"$UPSTREAM_PATH\""
    fi

    # save current path
    _path="$(pwd)"

    # cd to upstream and git pull
    cd "$UPSTREAM_PATH" || exit 1
    git checkout master
    git pull origin master

    # cd back
    cd "$_path" || exit 1

    # switch to upstream branch if it exists, else create and push it
    if ! git checkout "$UPSTREAM_BRANCH" >/dev/null 2>&1; then
        # create the new branch
        git checkout master
        git branch "$UPSTREAM_BRANCH" &&
        git checkout "$UPSTREAM_BRANCH" &&

        # clean
        _info "Cleaning new upstream branch" &&
        git branch &&
        rm -v ./* &&

        # copy upstream files
        find "$UPSTREAM_PATH" -maxdepth 1 -type f -exec cp -v {} . \; &&
        git add . &&
        git commit -m "$UPSTREAM_BRANCH: first commit" &&
        _info "Upstream branch \"$UPSTREAM_BRANCH\" didn't exist, it was created and commited with original upstream"
    else
        git checkout master
        git checkout "$UPSTREAM_BRANCH" &&
        # copy upstream files
        find "$UPSTREAM_PATH" -maxdepth 1 -type f -exec cp -v {} . \; &&
        git status
        _info "Pull from upstream finished, remember to commit and push to origin (github/gitlab...)
    if you don't want to lose the changes when you run a fullclean (git reset --hard origin/$UPSTREAM_BRANCH)."
    fi
}

_rebase_branches() {
    _info "running a rebase on all the branches"

    git checkout master
    git checkout "$UPSTREAM_BRANCH" &&
    _fullclean &&
    for branch in $(_branches); do
        if [ "$branch" != "master" ] && [ "$branch" != "$UPSTREAM_BRANCH" ]; then
            git checkout "$branch" &&
            git rebase --rebase-merges "$UPSTREAM_BRANCH" ||
            __conflics_help "$branch" &&
            _info "---- Branch $branch rebased successfully agaist $UPSTREAM_BRANCH ----"
        fi
    done

}

__conflics_help() {
    local branch msg
    branch="$1"

    git status

    if [ "$branch" = "$CONFIG_BRANCH" ]; then
        msg="conflicts detected on branch \"$branch\"
    This branch is marked as the config branch and not a patches branch
    so fix the conflicts as you please, usually keeping your personal
    configuration in place is better.

    <<<<<<< HEAD
        \"$UPSTREAM_BRANCH\" branch code is here
    =======
        \"$branch\" branch code is here
    >>>>>>> 5cbdf7e... patches addition

    After you modify the conflicting files, git add <file> to mark
    them as resolved and \"git rebase --continue\" to finish the rebase
    you'll have to rerun the script until all branches merge successfully."
    else
        msg="conflicts detected on branch \"$branch\"
    Usually if this branch is not used for storing your personal
    configuration, you can just merge everything from $UPSTREAM_BRANCH branch:

    <<<<<<< HEAD
        \"$UPSTREAM_BRANCH\" branch code is here, let it have priority
        then you can re-apply this branch patches after the rebase
    =======
        \"$branch\" branch code is here
    >>>>>>> 5cbdf7e... patches addition

    After you modify the conflicting files, git add <file> to mark
    them as resolved and \"git rebase --continue\" to finish the rebase
    you'll have to rerun the script until all branches merge successfully."
    fi

    _warn "$msg"
}

_clean() {
    _info "running clean..."
    git checkout master
    git checkout "$UPSTREAM_BRANCH" &&
    # clean
    make clean &&
    rm -vf config.h
}

_fullclean() {
    _clean # makes the checkout to upstream branch too
    _info "running fullclean..."
    echo
    # hard reset upstream branch
    git reset --hard "origin/${UPSTREAM_BRANCH}"
}

_build() {
    _info "running make && sudo make clean install"
    git checkout master
    git checkout "$UPSTREAM_BRANCH" &&
    make &&
    sudo make clean install &&
    _fullclean
}

_merge_branches() {
    git checkout master
    git checkout "$UPSTREAM_BRANCH" &&
    _fullclean &&

    for branch in $(_branches); do
        if [ "$branch" != "master" ] && [ "$branch" != "$UPSTREAM_BRANCH" ]; then
            _info "Merging \"$branch\"..."
            git merge "$branch" -m "merge: $branch" || _err "Something went wrong while merging"
        fi
    done
    _info "All branches merged successfully, now you can run $0 build to build&install the new version."
}

_diff() {
    git checkout master
    git checkout "$UPSTREAM_BRANCH" &&
    _clean &&
    _info "------------------------- DIFFs START -----------------------------
    " &&
    for branch in $(_branches); do
        if [ "$branch" != "master" ] && [ "$branch" != "$UPSTREAM_BRANCH" ]; then
            # TODO: Consider using this to have diffs backups
            git diff "${UPSTREAM_BRANCH}..${branch}"
        fi
    done
    _info "------------------------- DIFFs END -----------------------------
    "
}

_new_patch() {
    _info "To add a new patch follow below steps.

    1. Download the patch \"*.diff\" file somewhere.
    2. Make a full clean of the \"$UPSTREAM_BRANCH\" branch:
        ${0#*/} fullclean
    3. $(tput setaf 1; tput bold)Switch to ${UPSTREAM_BRANCH} branch$(tput setaf 4) and create a new branch with the patch name, eg:
        git checkout "$UPSTREAM_BRANCH"
        git branch vanity-gapps
    4. Switch to that branch
        git checkout vanity-gapps
    5. Create a folder named \"patches\"
        mkdir patches
    6. Copy the \"*.diff\" file inside \"patches\" directory
    7. Apply the patch (or try to) and commit if no errors.

    git apply patches/vanity-gapps.diff

    In case of error while patching, you can try the following:

        1. git apply <patch> -3v
        2. Edit the patch file and search for the conflicting lines
            usually the patching fails because it searches for a line that was
            modified in upstream since the patch was made.
        3. Modify the conflicting line so it matches upstream and the patch works again.
            note that some patches are so outdated that this is not possible.
        4. When everything is fixed, restore the branch (after the failed patching)
            git restore --staged <file>
            git restore <file>
        5. Re-apply the patch
        6. If all is successful, git add modified files AND the \"*.diff\" file.
        7. Commit.
    "
}

#### Script entry point
# initial check
if [ "$(git branch --show-current)" != "master" ]; then
    _warn "only run this script from the master branch
    you were on branch \"$(git branch --show-current)\"
    now I will switch to master
    "
    git checkout master
    exit 1
fi

if [ "$#" -eq 0 ] || [ "$1" = help ]; then
    _help
fi

case $1 in
    merge-branches)
        _merge_branches
        ;;
    pull-origin)
        _pull_origin
        ;;
    rebase-branches)
        _rebase_branches
        ;;
    clean)
        _clean
        ;;
    fullclean)
        _fullclean
        ;;
    build)
        _build
        ;;
    new-patch)
        _new_patch
        ;;
    push-all)
        _push_all
        ;;
    diff)
        _diff
        ;;
    *)
        _help
        ;;
esac
